def drawSquare():
    s = int(input())
    for i in range(s):
        if i == 0 or i == s - 1:
            print( "* " * s)
        else:
            print("* ", " " * (s - 2), " *")
drawSquare()
------------------------------------------------------------------------------------------
def celc_foren(c):
    return c * 1.8 + 32
while True:
    c = int(input())
    print(celc_foren(c))
-----------------------------------------------------------------------
def initials(n, s_n, f_n):
    return n[0], s_n[0], f_n[0]
while True:
    name, s_name, f_name = input().split()
    print(initials(name, s_name, f_name))
---------------------------------------------------------------------------------------
def summa(x):
    return x * (1 + x) / 2
while True:
    n = int(input())
    print(summa(n))
-----------------------------------------------------------------------------------------
a = input()
n = 0
def glas(a, g):
    global n
    for i in a:
        for j in g:
            if i == j:
                print(i * 3)
                n += 3
g = "эёуеоаыяию"
glas(a, g)
print(n)
-------------------------------------------------------------------------------------------------
def fact(n):
    if n == 0:
        return 1
    return n * fact(n - 1)
n = int(input())
print(fact(n))
-------------------------------------------------------------------------------
def summ(n):
    if n <= 1:
        return 1
    return n + summ(n - 1)
n = int(input())
print(summ(n))
-------------------------------------------------------------------------------------------------------
count = 20
def summ(n, count):
    print(n)
    if count == 0:
        return 1
    return n + summ(n / 2, count - 1)
n = 1
print(summ(n, count))
------------------------------------------------------------------------------------------------------------
stroke = "abafccra"
a = 'a'
def find_all(stroke, a):
    mas = []
    for i, j in enumerate(stroke):
        if j == a:
            mas.append(i)
    return mas
print(find_all(stroke, a))
------------------------------------------------------------------------------------------------
def obedinenie(mas1, mas2):
    mas3 = []
    for i in mas1:
        mas3.append(int(i))
    for i in mas2:
        mas3.append(int(i))
    return sort_mas(mas3)
def sort_mas(mas3):
    flag = True
    while flag:
        flag = False
        a = len(mas3)
        for i in range(a - 1):
            if mas3[i] > mas3[i + 1]:
                mas3[i], mas3[i + 1] = mas3[i + 1], mas3[i]
                flag = True
    return mas3
mas1 = input()
mas2 = input()
print(obedinenie(mas1, mas2))
-------------------------------------------------------------------------------------
x = float(input())
y = float(input())
def zona(x, y):
    if x <= 1 and y <= 1:
        return True
    else:
        return False
if zona(abs(x), abs(y)):
    print("Yes")
else:
    print("No")
---------------------------------------------------------------------------------------------
def okruznost(r, x, y):
    if (((x ** 2) + (y ** 2)) ** 0.5) <= r:
        return "Yes"
    else:
        return "No"
r = float(input())
x = float(input())
y = float(input())
print(okruznost(r, abs(x), abs(y)))
-----------------------------------------------------------------------------------------
def power(a, b):
    c = a
    if b > 0:
        for _ in range(b - 1):
            a *= c
    else:
        a = 1 / a
        c = a        
        for _ in range(abs(b) - 1):
            a *= c
    return a
a = int(input())
b = int(input())
print(power(a, b))
------------------------------------------------------------------------------------
def fact(n):
    if n > 1:
        return n * fact(n - 1)
    else:
        return n
n = int(input())
print(fact(n))
-------------------------------------------------------------------------------
def power(a, b):
    c = a
    if b == 1:
        return a
    else:
        return c * power(a, b - 1)
a = int(input())
b = int(input())
print(power(a, b))
----------------------------------------------------------------------
def fib(n, x, x2):
    if n == 1:
        return x
    elif n == 2:
        return x2
    else:
        return fib(n - 1, x + x2, x)
n = 10
x = 1
x2 = x
print(fib(n, x, x2))
----------------------------------------------------------------
